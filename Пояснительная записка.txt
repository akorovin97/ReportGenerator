Мною было принято решение разбить разработку на 4 части:
1) Парсинг xml файла для добычи параметров отчета;
2) Парсинг tsv файла с исходными данными и формирование из них массива;
3) Переработка исходных данных в нужный вид, учитывающий высоту страницы, а так же ширину каждого столбца;
4) Запись полученного результата в файл

Для выполнения я разбил проект на пакеты для парсинга, генерации и моделей классов, которые я использую в процессе.

1) В качестве способа парсинга xml документа я использовал библиотеку w3c.dom и ее метод getElementsByTagName,
записывая полученные данные в объект класса Report, в котором есть все необходимые поля.

2) В качестве способа парсинга tsv документя я выбрал библиотеку univocity, с помощью которой мы можем получить сразу все строчки.

3) Для обработки полученных данных, мне необходимо было сверять их длинну с длинной каждой колонки, а затем резать строку по пробелам, если это возможно.
В случае если слово длиннее, как "Константин", например, мне пришлось обрезать его по количеству вместимых символов.
Так же я написал вспомогательный класс RowGenerator, с помощью которого я мог, обрезав заранее данные, сформировать полноценную строку.
Далее в классе DataGenerator, я формировал список полученных строк, рассчитывая высоту страницы и обрезая ее "~" и новым заголовком, функцию по формированию которого я так же написал  в классе RowGenerator

4) После того как на выходе DataGenrator у меня был готовый список всех строк со всеми специальными символами, мне лишь оставалось записать его в файл с результатом. Это реализовано в классе Main.

На выполнение задания у меня ушло около 4 часов, так как изначально я думал, что смогу реализовать его с помощью библиотеки JasperReports, но там имеется жесткий стандарт входного xml файла, таким образом от этой идеи пришлось отказаться.

Комментарии к коду не писал, так как задание однодневное, и в тз не было требований по этому поводу. Если необходимо, могу дописать.